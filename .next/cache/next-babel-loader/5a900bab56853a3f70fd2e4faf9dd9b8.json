{"ast":null,"code":"import _regeneratorRuntime from \"D:/PROJECTS/grand-casino/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"D:/PROJECTS/grand-casino/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"D:/PROJECTS/grand-casino/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar dev = false;\nvar mode = process.env.MODE === 'no-certificate';\nexport var protocol = dev ? 'http' : 'https';\nexport var siteName = dev ? 'localhost' : 'grand-casino.com.ru';\nexport var port = dev ? 3000 : 443;\n\nif (mode) {\n  protocol = 'http';\n  siteName = 'grand-casino.com.ru';\n  port = 80;\n}\n\nvar fetchDataPage = function fetchDataPage(namePage) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n      var statusCode, url, params, response, data, errorMessage;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              statusCode = context.res ? context.res.statusCode : null;\n              url = \"\".concat(protocol, \"://\").concat(siteName, \":\").concat(port, \"/api/\").concat(namePage);\n              params = {\n                method: 'POST',\n                timeout: 5000,\n                compress: true\n              };\n              _context.next = 6;\n              return fetch(url, params);\n\n            case 6:\n              response = _context.sent;\n              _context.next = 9;\n              return response.json();\n\n            case 9:\n              data = _context.sent;\n              errorMessage = '';\n\n              if (statusCode === 404) {\n                errorMessage = 'Страница не найдена';\n              }\n\n              if (statusCode === 500) {\n                errorMessage = 'Что-то пошло не так :(';\n              }\n\n              return _context.abrupt(\"return\", {\n                props: _objectSpread(_objectSpread({}, data), {}, {\n                  statusCode: statusCode,\n                  errorMessage: errorMessage\n                })\n              });\n\n            case 16:\n              _context.prev = 16;\n              _context.t0 = _context[\"catch\"](0);\n              throw new Error(_context.t0);\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 16]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nexport default fetchDataPage;","map":null,"metadata":{},"sourceType":"module"}