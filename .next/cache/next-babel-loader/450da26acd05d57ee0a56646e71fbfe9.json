{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst dev = false;\nconst mode = process.env.MODE === 'no-certificate';\nexport let protocol = dev ? 'http' : 'https';\nexport let siteName = dev ? 'localhost' : 'grand-casino.com.ru';\nexport let port = dev ? 3000 : 443;\n\nif (mode) {\n  protocol = 'http';\n  siteName = 'grand-casino.com.ru';\n  port = 80;\n}\n\nconst fetchDataPage = namePage => async context => {\n  try {\n    const statusCode = context.res ? context.res.statusCode : null;\n    const url = `${protocol}://${siteName}:${port}/api/${namePage}`;\n    const params = {\n      method: 'POST',\n      timeout: 5000,\n      compress: true\n    };\n    const response = await fetch(url, params);\n    const data = await response.json();\n    let errorMessage = '';\n\n    if (statusCode === 404) {\n      errorMessage = 'Страница не найдена';\n    }\n\n    if (statusCode === 500) {\n      errorMessage = 'Что-то пошло не так :(';\n    }\n\n    return {\n      props: _objectSpread(_objectSpread({}, data), {}, {\n        statusCode,\n        errorMessage\n      })\n    };\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport default fetchDataPage;","map":null,"metadata":{},"sourceType":"module"}